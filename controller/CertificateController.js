import Certificate from "../models/CertificateModel.js";
import UserProgress from "../models/UserProgressModel.js";
import Course from "../models/CourseModel.js";
import UserSchema from "../models/userModel.js";
import { sendCertificateEmail } from "../utils/Emails.js";
import { v4 as uuidv4 } from 'uuid';

// Generate a certificate when a course is completed
export const generateCertificate = async (req, res) => {
  try {
    const { courseId } = req.params;
    const userId = req.user._id;

    // Check if user has completed the course
    const userProgress = await UserProgress.findOne({ user: userId, course: courseId })
      .populate({
        path: 'course',
        select: 'title videos instructor',
      });

    if (!userProgress) {
      return res.status(404).json({
        success: false,
        message: "Course progress not found",
      });
    }

    // Check if completion percentage is 100%
    if (userProgress.completionPercentage < 100) {
      return res.status(400).json({
        success: false,
        message: "Course not fully completed yet",
        currentProgress: userProgress.completionPercentage,
      });
    }

    // Check if certificate already exists
    let certificate = await Certificate.findOne({ user: userId, course: courseId });
    
    if (certificate) {
      return res.status(200).json({
        success: true,
        message: "Certificate already issued",
        certificate,
      });
    }

    // Get user details
    const user = await UserSchema.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found",
      });
    }

    // Generate unique certificate ID
    const certificateId = `CERT-${uuidv4().substring(0, 8)}-${Date.now().toString().substring(7)}`;
    
    // Create certificate URL (this would typically be generated by a certificate generation service)
    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const certificateUrl = `${baseUrl}/certificate/${certificateId}`;
    const verificationUrl = `${baseUrl}/verify-certificate/${certificateId}`;

    // Create new certificate
    certificate = await Certificate.create({
      user: userId,
      course: courseId,
      certificateId,
      completionDate: new Date(),
      certificateUrl,
      verificationUrl,
    });

    // Send certificate email
    await sendCertificateEmail(
      user.email,
      user.firstname,
      userProgress.course.title,
      certificateUrl,
      verificationUrl
    );

    res.status(201).json({
      success: true,
      message: "Certificate generated successfully",
      certificate,
    });

  } catch (error) {
    console.error("Error generating certificate:", error);
    res.status(500).json({
      success: false,
      message: "Error generating certificate",
      error: error.message,
    });
  }
};

// Get certificate for a specific course
export const getCertificate = async (req, res) => {
  try {
    const { courseId } = req.params;
    const userId = req.user._id;

    const certificate = await Certificate.findOne({ user: userId, course: courseId })
      .populate({
        path: 'course',
        select: 'title instructor',
        populate: {
          path: 'instructor',
          select: 'firstname lastname'
        }
      })
      .populate('user', 'firstname lastname email');

    if (!certificate) {
      return res.status(404).json({
        success: false,
        message: "Certificate not found",
      });
    }

    res.status(200).json({
      success: true,
      certificate,
    });

  } catch (error) {
    console.error("Error fetching certificate:", error);
    res.status(500).json({
      success: false,
      message: "Error fetching certificate",
      error: error.message,
    });
  }
};

// Get all certificates for a user
export const getAllCertificates = async (req, res) => {
  try {
    const userId = req.user._id;

    const certificates = await Certificate.find({ user: userId })
      .populate({
        path: 'course',
        select: 'title instructor category',
        populate: {
          path: 'instructor',
          select: 'firstname lastname'
        }
      })
      .sort({ issueDate: -1 });

    res.status(200).json({
      success: true,
      count: certificates.length,
      certificates,
    });

  } catch (error) {
    console.error("Error fetching certificates:", error);
    res.status(500).json({
      success: false,
      message: "Error fetching certificates",
      error: error.message,
    });
  }
};

// Verify certificate by certificate ID
export const verifyCertificate = async (req, res) => {
  try {
    const { certificateId } = req.params;

    const certificate = await Certificate.findOne({ certificateId })
      .populate({
        path: 'course',
        select: 'title instructor',
        populate: {
          path: 'instructor',
          select: 'firstname lastname'
        }
      })
      .populate('user', 'firstname lastname');

    if (!certificate) {
      return res.status(404).json({
        success: false,
        message: "Certificate not found or invalid",
        isValid: false,
      });
    }

    // Check if certificate is not revoked
    const isValid = certificate.status === 'issued';

    res.status(200).json({
      success: true,
      isValid,
      certificate: isValid ? {
        certificateId: certificate.certificateId,
        courseName: certificate.course.title,
        studentName: `${certificate.user.firstname} ${certificate.user.lastname}`,
        instructorName: `${certificate.course.instructor.firstname} ${certificate.course.instructor.lastname}`,
        issueDate: certificate.issueDate,
        completionDate: certificate.completionDate,
      } : null,
    });

  } catch (error) {
    console.error("Error verifying certificate:", error);
    res.status(500).json({
      success: false,
      message: "Error verifying certificate",
      error: error.message,
      isValid: false,
    });
  }
};

// Admin: Revoke a certificate
export const revokeCertificate = async (req, res) => {
  try {
    // Check if user is admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: "Access denied. Admin only.",
      });
    }

    const { certificateId } = req.params;
    const { reason } = req.body;

    const certificate = await Certificate.findOne({ certificateId });

    if (!certificate) {
      return res.status(404).json({
        success: false,
        message: "Certificate not found",
      });
    }

    // Update certificate status
    certificate.status = 'revoked';
    certificate.revocationReason = reason;
    certificate.revokedAt = new Date();
    certificate.revokedBy = req.user._id;
    
    await certificate.save();

    res.status(200).json({
      success: true,
      message: "Certificate revoked successfully",
    });

  } catch (error) {
    console.error("Error revoking certificate:", error);
    res.status(500).json({
      success: false,
      message: "Error revoking certificate",
      error: error.message,
    });
  }
};

// Auto-generate certificate when course is completed
export const checkAndGenerateCertificate = async (userId, courseId) => {
  try {
    // Check if user has completed the course
    const userProgress = await UserProgress.findOne({ user: userId, course: courseId })
      .populate({
        path: 'course',
        select: 'title videos',
      });

    if (!userProgress || userProgress.completionPercentage < 100) {
      return null;
    }

    // Check if certificate already exists
    let certificate = await Certificate.findOne({ user: userId, course: courseId });
    
    if (certificate) {
      return certificate;
    }

    // Get user details
    const user = await UserSchema.findById(userId);
    if (!user) {
      return null;
    }

    // Generate unique certificate ID
    const certificateId = `CERT-${uuidv4().substring(0, 8)}-${Date.now().toString().substring(7)}`;
    
    // Create certificate URL
    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const certificateUrl = `${baseUrl}/certificate/${certificateId}`;
    const verificationUrl = `${baseUrl}/verify-certificate/${certificateId}`;

    // Create new certificate
    certificate = await Certificate.create({
      user: userId,
      course: courseId,
      certificateId,
      completionDate: new Date(),
      certificateUrl,
      verificationUrl,
    });

    // Send certificate email
    await sendCertificateEmail(
      user.email,
      user.firstname,
      userProgress.course.title,
      certificateUrl,
      verificationUrl
    );

    return certificate;
  } catch (error) {
    console.error("Error in auto-generating certificate:", error);
    return null;
  }
};